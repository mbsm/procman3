"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class proc_info_t(object):
    __slots__ = ["name", "group", "deputy", "status", "errors", "cpu", "mem", "priority", "pid", "auto_restart", "exit_code"]

    __typenames__ = ["string", "string", "string", "string", "string", "float", "int32_t", "int32_t", "int32_t", "boolean", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.name = ""
        self.group = ""
        self.deputy = ""
        self.status = ""
        self.errors = ""
        self.cpu = 0.0
        self.mem = 0
        self.priority = 0
        self.pid = 0
        self.auto_restart = False
        self.exit_code = 0

    def encode(self):
        buf = BytesIO()
        buf.write(proc_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        __group_encoded = self.group.encode('utf-8')
        buf.write(struct.pack('>I', len(__group_encoded)+1))
        buf.write(__group_encoded)
        buf.write(b"\0")
        __deputy_encoded = self.deputy.encode('utf-8')
        buf.write(struct.pack('>I', len(__deputy_encoded)+1))
        buf.write(__deputy_encoded)
        buf.write(b"\0")
        __status_encoded = self.status.encode('utf-8')
        buf.write(struct.pack('>I', len(__status_encoded)+1))
        buf.write(__status_encoded)
        buf.write(b"\0")
        __errors_encoded = self.errors.encode('utf-8')
        buf.write(struct.pack('>I', len(__errors_encoded)+1))
        buf.write(__errors_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">fiiibb", self.cpu, self.mem, self.priority, self.pid, self.auto_restart, self.exit_code))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != proc_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return proc_info_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = proc_info_t()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        __group_len = struct.unpack('>I', buf.read(4))[0]
        self.group = buf.read(__group_len)[:-1].decode('utf-8', 'replace')
        __deputy_len = struct.unpack('>I', buf.read(4))[0]
        self.deputy = buf.read(__deputy_len)[:-1].decode('utf-8', 'replace')
        __status_len = struct.unpack('>I', buf.read(4))[0]
        self.status = buf.read(__status_len)[:-1].decode('utf-8', 'replace')
        __errors_len = struct.unpack('>I', buf.read(4))[0]
        self.errors = buf.read(__errors_len)[:-1].decode('utf-8', 'replace')
        self.cpu, self.mem, self.priority, self.pid = struct.unpack(">fiii", buf.read(16))
        self.auto_restart = bool(struct.unpack('b', buf.read(1))[0])
        self.exit_code = struct.unpack(">b", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if proc_info_t in parents: return 0
        tmphash = (0x6f0dc2fc8358e169) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if proc_info_t._packed_fingerprint is None:
            proc_info_t._packed_fingerprint = struct.pack(">Q", proc_info_t._get_hash_recursive([]))
        return proc_info_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", proc_info_t._get_packed_fingerprint())[0]

