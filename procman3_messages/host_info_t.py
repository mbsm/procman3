"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class host_info_t(object):
    __slots__ = ["timestamp", "hostname", "ip", "cpus", "cpu_usage", "mem_total", "mem_used", "mem_free", "mem_usage", "network_sent", "network_recv", "uptime"]

    __typenames__ = ["int64_t", "string", "string", "int32_t", "float", "float", "float", "float", "float", "float", "float", "int64_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.hostname = ""
        self.ip = ""
        self.cpus = 0
        self.cpu_usage = 0.0
        self.mem_total = 0.0
        self.mem_used = 0.0
        self.mem_free = 0.0
        self.mem_usage = 0.0
        self.network_sent = 0.0
        self.network_recv = 0.0
        self.uptime = 0

    def encode(self):
        buf = BytesIO()
        buf.write(host_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __hostname_encoded = self.hostname.encode('utf-8')
        buf.write(struct.pack('>I', len(__hostname_encoded)+1))
        buf.write(__hostname_encoded)
        buf.write(b"\0")
        __ip_encoded = self.ip.encode('utf-8')
        buf.write(struct.pack('>I', len(__ip_encoded)+1))
        buf.write(__ip_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ifffffffq", self.cpus, self.cpu_usage, self.mem_total, self.mem_used, self.mem_free, self.mem_usage, self.network_sent, self.network_recv, self.uptime))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != host_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return host_info_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = host_info_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __hostname_len = struct.unpack('>I', buf.read(4))[0]
        self.hostname = buf.read(__hostname_len)[:-1].decode('utf-8', 'replace')
        __ip_len = struct.unpack('>I', buf.read(4))[0]
        self.ip = buf.read(__ip_len)[:-1].decode('utf-8', 'replace')
        self.cpus, self.cpu_usage, self.mem_total, self.mem_used, self.mem_free, self.mem_usage, self.network_sent, self.network_recv, self.uptime = struct.unpack(">ifffffffq", buf.read(40))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if host_info_t in parents: return 0
        tmphash = (0xe14c8b7824504d38) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if host_info_t._packed_fingerprint is None:
            host_info_t._packed_fingerprint = struct.pack(">Q", host_info_t._get_hash_recursive([]))
        return host_info_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", host_info_t._get_packed_fingerprint())[0]

