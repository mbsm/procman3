"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class command_t(object):
    __slots__ = ["name", "group", "hostname", "command", "proc_command", "auto_restart", "realtime"]

    __typenames__ = ["string", "string", "string", "string", "string", "boolean", "boolean"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.name = ""
        self.group = ""
        self.hostname = ""
        self.command = ""
        self.proc_command = ""
        self.auto_restart = False
        self.realtime = False

    def encode(self):
        buf = BytesIO()
        buf.write(command_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        __group_encoded = self.group.encode('utf-8')
        buf.write(struct.pack('>I', len(__group_encoded)+1))
        buf.write(__group_encoded)
        buf.write(b"\0")
        __hostname_encoded = self.hostname.encode('utf-8')
        buf.write(struct.pack('>I', len(__hostname_encoded)+1))
        buf.write(__hostname_encoded)
        buf.write(b"\0")
        __command_encoded = self.command.encode('utf-8')
        buf.write(struct.pack('>I', len(__command_encoded)+1))
        buf.write(__command_encoded)
        buf.write(b"\0")
        __proc_command_encoded = self.proc_command.encode('utf-8')
        buf.write(struct.pack('>I', len(__proc_command_encoded)+1))
        buf.write(__proc_command_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bb", self.auto_restart, self.realtime))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != command_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return command_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = command_t()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        __group_len = struct.unpack('>I', buf.read(4))[0]
        self.group = buf.read(__group_len)[:-1].decode('utf-8', 'replace')
        __hostname_len = struct.unpack('>I', buf.read(4))[0]
        self.hostname = buf.read(__hostname_len)[:-1].decode('utf-8', 'replace')
        __command_len = struct.unpack('>I', buf.read(4))[0]
        self.command = buf.read(__command_len)[:-1].decode('utf-8', 'replace')
        __proc_command_len = struct.unpack('>I', buf.read(4))[0]
        self.proc_command = buf.read(__proc_command_len)[:-1].decode('utf-8', 'replace')
        self.auto_restart = bool(struct.unpack('b', buf.read(1))[0])
        self.realtime = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if command_t in parents: return 0
        tmphash = (0x36459f0534860637) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if command_t._packed_fingerprint is None:
            command_t._packed_fingerprint = struct.pack(">Q", command_t._get_hash_recursive([]))
        return command_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", command_t._get_packed_fingerprint())[0]

